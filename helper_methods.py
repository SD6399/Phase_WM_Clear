import csv
import re
from pathlib import Path

import cv2
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
from skimage import io

# from reedsolomon import Nbit

size_quadr = 16


def read_video(path, path_to_save):
    vidcap = cv2.VideoCapture(path)
    count_frame = 0
    success = True
    while success:
        success, image = vidcap.read()

        if success:
            gray_frame = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            # gray_frame = image
            # cv2.imwrite(path_to_save + "/frame%d.png" % count_frame, image)
            img = Image.fromarray(gray_frame.astype('uint8'))
            img.save(path_to_save + "frame" + str(count_frame) + ".png")
        if count_frame % 500 == 499:
            print("записан кадр", count_frame, )

        if cv2.waitKey(10) == 27:
            break
        count_frame += 1
    return count_frame


def sort_spis(sp, keyword):
    """

    :param sp: list of images
    :param keyword: name of these images
    :return: sorted by number list of images
    """
    spp = []
    spb = []
    res = []
    for i in sp:
        spp.append("".join(re.findall(r'\d', i)))
        spb.append(keyword)
    result = [int(item) for item in spp]
    result.sort()

    result1 = [str(item) for item in result]
    for k in range(len(sp)):
        res.append(spb[k] + result1[k] + ".png")
    return res


def img2bin(img):
    """

    :param img: grayscale image
    :return: binary image with average by squares
    """
    k = 0

    our_avg = np.mean(img)
    for i in range(0, img.shape[0]):
        for j in range(0, img.shape[1]):
            tmp = img[i, j]

            if tmp > our_avg:
                img[i, j] = 255
            else:
                img[i, j] = 0

            k += 1
    return img


def big2small(st_qr):
    """

    :param st_qr: big qr with square 16x16
    :return: qr with suqare 1x1 with average by 16x16
    """
    qr = np.zeros((int(st_qr.shape[0] / 16), int(st_qr.shape[1] / 16)))

    for i in range(0, st_qr.shape[0], size_quadr):
        for j in range(0, st_qr.shape[1], size_quadr):
            mean_now = np.mean(st_qr[i:i + size_quadr, j:j + size_quadr])
            qr[int(i / size_quadr), int(j / size_quadr)] = mean_now

    return qr


def small2big(sm_qr):
    """

    :param sm_qr: small qr with square 1x1
    :return: big qr with square 16x16
    """
    qr = np.zeros((sm_qr.shape[0] * 16, sm_qr.shape[1] * 16))

    for i in range(0, int(sm_qr.shape[0])):
        for j in range(0, int(sm_qr.shape[1])):
            tmp = sm_qr[i, j]
            qr[i * 16:i * 16 + 16, j * 16:j * 16 + 16].fill(tmp)
    qr = np.where(qr == 1, 255, 0)
    return qr


# def img2bin(img):
#     k = 0
#
#     our_avg = np.mean(img)
#     for i in range(0, img.shape[0]):
#         for j in range(0, img.shape[1]):
#             tmp = img[i, j]
#
#             if tmp > our_avg:
#                 img[i, j] = 255
#             else:
#                 img[i, j] = 0
#
#             k += 1
#     return img


def disp(path, word='/frame', name_of_doc='LG_disp.csv'):
    cnt = 0
    arr = np.array([])

    total_count = len(list(Path(path).iterdir()))

    list_diff = []
    while cnt < 1377:
        tmp = np.copy(arr)
        arr = io.imread(path + word + str(cnt) + ".png").astype(float)
        if cnt == 0:
            list_diff.append(0)

        else:
            diff_img = np.abs(arr - tmp)

            list_diff.append(np.mean(diff_img))
        if cnt % 100 == 0:
            print(cnt)
        cnt += 1

    max_val_list = max(list_diff)
    list_diff = list_diff / max_val_list / 2

    with open(name_of_doc, 'w') as f:

        # using csv.writer method from CSV package
        write = csv.writer(f)
        write.writerow(list_diff)

    plt.plot(list_diff)
    plt.show()

    avg = sum(list_diff) / len(list_diff)

    upd_start = []
    for i in range(len(list_diff)):
        if abs((list_diff[i])) > (4 * avg):
            upd_start.append(i)

    return list_diff


def csv2list(path_csv):
    """

    :param path_csv:
    :return:  parsing csv
    """
    with open(path_csv, newline='') as csvfile:
        readCSV = csv.reader(csvfile, delimiter=',')
        l = []
        for row in readCSV:
            l.append(row)
    need_list = l[0]
    result = [float(item) for item in need_list]
    return result


def bit_voting(image, count):
    vec_np = np.reshape(image, image.shape[0] * image.shape[1])[0:count]
    vec_np[vec_np == 255] = 1
    vec_vot = np.zeros(int(count / 7))
    for i in range(len(vec_vot)):
        for j in range(0, 7):
            vec_vot[i] += vec_np[j * len(vec_vot) + i]
    vec_vot[vec_vot < (7 / 2)] = 0
    vec_vot[vec_vot > (7 / 2)] = 255

    long_vec = np.zeros(vec_np.shape)
    for i in range(0, 7):
        tmp = i * len(vec_vot)
        tmp2 = (i + 1) * len(vec_vot)
        long_vec[tmp:tmp2] = vec_vot
    for i in range(image.shape[0] * image.shape[1] - count):
        vec_np = np.append(vec_np, 0)
    matr_aft_vot = np.reshape(vec_np, (image.shape[0], image.shape[1]))
    matr_aft_vot[matr_aft_vot == 1] = 255
    return matr_aft_vot


def compar_before_after_saving(folderb4, foldera5):
    b4_00 = []
    a5_00 = []
    for i in range(2997):
        b4_00.append(io.imread(folderb4 + "/result" + str(i) + ".png")[0, 0, 0])
        a5_00.append(io.imread(foldera5 + "/frame" + str(i) + ".png")[0, 0, 0])
        print(i)

    print(b4_00)
    print(a5_00)


def disp_pix(path, coord_x, coord_y, total_count):
    cnt = 1
    arr = np.array([])

    list_diff = []
    while cnt < total_count:
        tmp = np.copy(arr[coord_x, coord_y])
        arr = cv2.imread(path + str(cnt) + ".png").astype(float)[coord_x, coord_y]

        diff_pix = np.abs(arr - tmp)
        print(np.mean(diff_pix), " frame ", cnt)
        list_diff.append(np.mean(diff_pix))
        cnt += 1

    avg = sum(list_diff) / len(list_diff)
    max_list = max(list_diff)
    print(avg)
    for i in range(len(list_diff)):
        list_diff[i] /= max_list

    return list_diff


def create_gray_bg():
    frame = np.full((1080, 1920), 127)
    orig_qr = io.imread(r"D:\pythonProject\\phase_wm/some_qr.png")

    for cnt in range(1000):
        wm = np.asarray((-1) ** (cnt + orig_qr / 255))
        print(np.max(wm), np.min(wm))
        final = np.copy(frame)
        final[20:1060, 440:1480] = frame[20:1060, 440:1480] + wm
        imgc = Image.fromarray(final.astype('uint8'))
        imgc.save(
            r"D:/phase_wm_graps/BBC/gray_background/result" + str(cnt) + ".png")


def decode_wm(wm, path_to_save):
    decoding_qr = np.zeros(wm.shape)

    wm = np.where(wm == 255, 1, 0)
    for i in range(wm.shape[0]):
        for j in range(wm.shape[1]):
            if j != 0:
                if wm[i, j] == 0:
                    decoding_qr[i, j] = abs(decoding_qr[i, j - 1] - 1)
                else:
                    decoding_qr[i, j] = decoding_qr[i, j - 1]
            else:
                if wm[i, j] == 0:
                    decoding_qr[i, j] = 1
                else:
                    decoding_qr[i, j] = 0

    decoding_qr = np.where(decoding_qr == 1, 255, 0)
    img = Image.fromarray(decoding_qr.astype('uint8'))

    img.convert('RGB').save(path_to_save)

    return decoding_qr


def compare_qr(myqr, orig_qr, shift):
    """
     Comparing the extracted QR with the original one
    :param path: path to code for comparison
    :return: percentage of similarity
    """

    # orig_qr = io.imread(r"data/RS_cod89x89.png")
    orig_cut = np.zeros((49, 49))
    orig_qr = np.where(orig_qr > 127, 255, 0)
    orig_cut[:, :24] = orig_qr[1 + shift:50 + shift, 1 + shift:25 + shift]
    if shift != 0:
        orig_cut[:, 24:] = orig_qr[1 + shift:50 + shift, -25 - shift:-shift]
    else:
        orig_cut[:, 24:] = orig_qr[1 + shift:50 + shift, -25 - shift:]
    # small_qr = big2small(orig_qr)
    # sr_matr = np.zeros((1424, 1424, 3))
    # myqr = io.imread(path)

    # myqr_cut = myqr
    myqr_cut = np.zeros((49, 49))

    myqr_cut[:, :24] = myqr[1 + shift:50 + shift, 1 + shift:25 + shift]
    myqr_cut[:, 24:] = myqr[1 + shift:50 + shift, -25 - shift:]
    myqr_cut = np.where(myqr_cut > np.mean(myqr_cut), 255, 0)

    sr_matr = orig_cut == myqr_cut
    k = np.count_nonzero(sr_matr)
    return k / sr_matr.size


def binarize_qr(myqr, shift):
    """
     Comparing the extracted QR with the original one
    :param path: path to code for comparison
    :return: percentage of similarity
    """

    myqr_cut = np.zeros((49, 49))
    # for i in range(0, 230, 4):
    #     for j in range(0, 230, 4):
    #         myqr_cut[int(i / 4), int(j / 4)] = np.mean(myqr[1 + i + shift: i + shift + 4 +1, -33 + j - shift:-33+j - shift+4])

    myqr_cut[:, :24] = myqr[1 + shift:50 + shift, 1 + shift:25 + shift]
    if shift != 0:
        myqr_cut[:, 24:] = myqr[1 + shift:50 + shift, -25 - shift:-shift]
    else:
        myqr_cut[:, 24:] = myqr[1 + shift:50 + shift, -25 - shift:]
    myqr_cut = np.where(myqr_cut > np.mean(myqr_cut), 255, 0)
    myqr_cut[myqr_cut == 255] = 1

    return myqr_cut


# create_gray_bg()
# compar_before_after_saving("C:/Users/user/PycharmProjects/phase_wm/frames_after_emb", "C:/Users/user/PycharmProjects/phase_wm/extract")

# bit_voting(io.imread(r"D:\dk\university\nirs\extract/wm_after_2_smooth_bin/result" + str(456) + ".png"), 7112)
# print(disp("C:/Users/user/PycharmProjects/phase_wm/frames_orig_video"))
# csv2list('LG_disp.csv')

"""
a5 = [0.514792899408284, 0.5417751479289941, 0.9531360946745562, 0.9337278106508876, 0.7753846153846153,
      0.6596449704142012, 0.9995266272189349, 1.0, 1.0, 1.0, 0.8866272189349113, 0.9898224852071006,
      0.7162130177514793, 0.9510059171597633, 0.994792899408284, 0.9905325443786982, 0.9981065088757396,
      0.8830769230769231, 0.9995266272189349, 0.9912426035502958, 0.5394082840236687, 0.5121893491124261,
      0.5112426035502958, 0.5105325443786982, 0.5107692307692308, 0.5095857988165681, 0.5095857988165681,
      0.5095857988165681, 0.5107692307692308, 0.5100591715976331, 0.5117159763313609, 0.5100591715976331,
      0.5140828402366864, 0.5124260355029586, 0.5114792899408284, 0.5150295857988165, 0.5223668639053255,
      0.5732544378698224, 0.5644970414201184, 0.5898224852071006, 0.5910059171597634, 0.6288757396449705,
      0.6584615384615384, 0.6307692307692307, 0.6686390532544378, 0.6885207100591716, 0.6584615384615384,
      0.5848520710059172, 0.5900591715976331, 0.5460355029585798, 0.5689940828402367, 0.597396449704142,
      0.6257988165680474, 0.663905325443787, 0.7422485207100592, 0.7654437869822486, 0.7557396449704142,
      0.8511242603550296, 0.8861538461538462, 0.8989349112426035, 0.8764497041420118, 0.9119526627218935,
      0.9242603550295858, 0.9100591715976332, 0.8925443786982249, 0.9297041420118343, 0.9382248520710059,
      0.9583431952662722, 0.9453254437869822, 0.9656804733727811, 0.9808284023668639, 0.9879289940828402,
      0.9931360946745562, 0.9910059171597633, 0.9938461538461538, 0.9933727810650888, 0.9924260355029586,
      0.9936094674556213, 0.9931360946745562, 0.9966863905325444, 0.9957396449704142, 0.9966863905325444,
      0.9969230769230769, 0.994792899408284, 0.9914792899408285, 0.9914792899408285, 0.9805917159763313,
      0.9528994082840236, 0.970887573964497, 0.9730177514792899, 0.9564497041420118, 0.9528994082840236,
      0.8901775147928994, 0.9226035502958579, 0.9429585798816568, 0.9403550295857989, 0.6837869822485207,
      0.6892307692307692, 0.7332544378698225, 0.7545562130177514, 0.7737278106508876, 0.7952662721893491,
      0.8175147928994083, 0.8274556213017752, 0.8684023668639054, 0.8731360946745562, 0.9079289940828402,
      0.9157396449704142, 0.9453254437869822, 0.9457988165680473, 0.951715976331361, 0.9465088757396449,
      0.9609467455621302, 0.965207100591716, 0.9723076923076923, 0.9611834319526628, 0.965207100591716,
      0.9673372781065088, 0.9706508875739644, 0.9784615384615385, 0.9820118343195267, 0.9850887573964497,
      0.9862721893491124, 0.9933727810650888, 0.9940828402366864, 0.9981065088757396, 0.9983431952662722,
      0.9983431952662722, 0.9985798816568048, 0.9985798816568048, 0.9985798816568048, 0.9988165680473373,
      0.9988165680473373, 0.9988165680473373, 0.9995266272189349, 0.9990532544378699, 0.9992899408284024,
      0.9995266272189349, 0.9995266272189349, 0.9997633136094675, 0.9995266272189349, 0.9995266272189349,
      0.9995266272189349, 0.9997633136094675, 0.9992899408284024, 0.9992899408284024, 0.9995266272189349,
      0.9995266272189349, 0.9997633136094675, 0.9997633136094675]

a3 = [0.5081656804733727, 0.5079289940828402, 0.5460355029585798, 0.556923076923077, 0.5169230769230769,
      0.5110059171597633, 0.9559763313609467, 0.9358579881656804, 0.9753846153846154, 0.7881656804733728,
      0.5327810650887574, 0.7060355029585799, 0.5197633136094675, 0.5881656804733728, 0.7254437869822485,
      0.7105325443786982, 0.8499408284023668, 0.5782248520710059, 0.855621301775148, 0.7697041420118343,
      0.5131360946745562, 0.5102958579881657, 0.5100591715976331, 0.5093491124260355, 0.5102958579881657,
      0.5098224852071006, 0.5095857988165681, 0.5100591715976331, 0.5102958579881657, 0.5102958579881657,
      0.5114792899408284, 0.5105325443786982, 0.5143195266272189, 0.5143195266272189, 0.5128994082840237,
      0.5138461538461538, 0.5162130177514793, 0.525680473372781, 0.5261538461538462, 0.5287573964497041,
      0.5315976331360946, 0.5398816568047338, 0.5472189349112426, 0.570414201183432, 0.5642603550295858,
      0.5581065088757396, 0.5431952662721894, 0.525680473372781, 0.5259171597633137, 0.5197633136094675,
      0.5228402366863906, 0.5259171597633137, 0.5268639053254438, 0.5318343195266272, 0.5410650887573965,
      0.5427218934911242, 0.5450887573964497, 0.5727810650887574, 0.5905325443786982, 0.6089940828402367,
      0.6255621301775148, 0.6570414201183432, 0.6745562130177515, 0.6724260355029585, 0.6627218934911243,
      0.6956213017751479, 0.7133727810650887, 0.7318343195266273, 0.703905325443787, 0.7275739644970414,
      0.7765680473372781, 0.7879289940828402, 0.8527810650887574, 0.8134911242603551, 0.8660355029585799,
      0.8927810650887574, 0.882603550295858, 0.9084023668639053, 0.9048520710059171, 0.9110059171597633,
      0.874792899408284, 0.8901775147928994, 0.8942011834319527, 0.8823668639053255, 0.8267455621301775,
      0.8435502958579881, 0.8113609467455621, 0.7656804733727811, 0.7997633136094675, 0.796923076923077,
      0.7715976331360946, 0.7564497041420118, 0.6771597633136095, 0.7005917159763314, 0.7330177514792899,
      0.7566863905325444, 0.5637869822485208, 0.5635502958579882, 0.5805917159763314, 0.5850887573964497,
      0.5945562130177515, 0.6002366863905325, 0.6044970414201184, 0.6120710059171598, 0.6248520710059171,
      0.6423668639053255, 0.674792899408284, 0.6792899408284023, 0.7285207100591716, 0.7218934911242604,
      0.7555029585798817, 0.7394082840236686, 0.7706508875739645, 0.7713609467455621, 0.7810650887573964,
      0.7396449704142012, 0.7507692307692307, 0.7512426035502958, 0.7647337278106509, 0.7801183431952663,
      0.7978698224852071, 0.8165680473372781, 0.803076923076923, 0.8563313609467456, 0.8700591715976331,
      0.9188165680473372, 0.9280473372781065, 0.9401183431952663, 0.9562130177514793, 0.9585798816568047,
      0.963076923076923, 0.9701775147928994, 0.9784615384615385, 0.9820118343195267, 0.9872189349112426,
      0.9881656804733728, 0.9853254437869823, 0.9848520710059172, 0.978224852071006, 0.9711242603550296,
      0.9706508875739644, 0.9661538461538461, 0.9661538461538461, 0.965207100591716, 0.9611834319526628,
      0.9730177514792899, 0.9585798816568047, 0.9715976331360947, 0.9618934911242604, 0.9706508875739644]

a2 = [0.5081656804733727, 0.5079289940828402, 0.5268639053254438, 0.5491124260355029, 0.5110059171597633,
      0.5093491124260355, 0.7640236686390532, 0.736094674556213, 0.7150295857988166, 0.5195266272189349,
      0.5192899408284024, 0.6804733727810651, 0.5216568047337278, 0.573491124260355, 0.693491124260355,
      0.7031952662721893, 0.8009467455621302, 0.6345562130177514, 0.8196449704142011, 0.8066272189349113,
      0.5102958579881657, 0.5100591715976331, 0.5098224852071006, 0.509112426035503, 0.5088757396449705,
      0.5086390532544379, 0.5088757396449705, 0.509112426035503, 0.5095857988165681, 0.5098224852071006,
      0.5100591715976331, 0.5100591715976331, 0.5112426035502958, 0.5124260355029586, 0.5128994082840237,
      0.5126627218934912, 0.5126627218934912, 0.5131360946745562, 0.5131360946745562, 0.5136094674556213,
      0.5140828402366864, 0.5143195266272189, 0.5157396449704142, 0.5209467455621302, 0.5204733727810651,
      0.5271005917159763, 0.5228402366863906, 0.5152662721893491, 0.5162130177514793, 0.5133727810650888,
      0.5133727810650888, 0.5138461538461538, 0.5145562130177515, 0.5159763313609468, 0.517396449704142,
      0.5176331360946745, 0.5185798816568047, 0.5249704142011834, 0.5294674556213018, 0.5358579881656804,
      0.5469822485207101, 0.5514792899408284, 0.5588165680473373, 0.5649704142011834, 0.5699408284023668,
      0.5751479289940828, 0.5836686390532544, 0.5926627218934911, 0.5782248520710059, 0.5971597633136094,
      0.6220118343195267, 0.6253254437869823, 0.6471005917159763, 0.642130177514793, 0.6695857988165681,
      0.7015384615384616, 0.698698224852071, 0.7237869822485207, 0.7297041420118343, 0.7128994082840237,
      0.6814201183431953, 0.7003550295857989, 0.7001183431952662, 0.6958579881656805, 0.6444970414201183,
      0.6520710059171597, 0.6397633136094675, 0.6255621301775148, 0.6492307692307693, 0.6463905325443787,
      0.6359763313609468, 0.6257988165680474, 0.589585798816568, 0.6018934911242604, 0.615621301775148,
      0.6324260355029586, 0.5346745562130177, 0.5396449704142012, 0.5346745562130177, 0.5519526627218935,
      0.5538461538461539, 0.5571597633136095, 0.5557396449704142, 0.5592899408284023, 0.5689940828402367,
      0.5727810650887574, 0.5822485207100592, 0.5843786982248521, 0.610887573964497, 0.6049704142011835,
      0.618224852071006, 0.6130177514792899, 0.62698224852071, 0.6362130177514793, 0.62698224852071, 0.6115976331360947,
      0.6170414201183432, 0.6196449704142012, 0.6229585798816568, 0.6307692307692307, 0.6352662721893491,
      0.6433136094674556, 0.6449704142011834, 0.6710059171597633, 0.6802366863905326, 0.7602366863905325,
      0.7988165680473372, 0.8208284023668639, 0.84, 0.829112426035503, 0.8345562130177515, 0.8473372781065088,
      0.8847337278106508, 0.8942011834319527, 0.9062721893491125, 0.9081656804733728, 0.8989349112426035,
      0.8958579881656805, 0.9057988165680473, 0.895621301775148, 0.8996449704142012, 0.8970414201183432,
      0.89301775147929, 0.8989349112426035, 0.8960946745562131, 0.8998816568047338, 0.8532544378698225,
      0.9140828402366864, 0.8759763313609468, 0.8743195266272189]

a1 = [0.5081656804733727, 0.5079289940828402, 0.5218934911242603, 0.5401183431952663, 0.5084023668639053,
      0.5081656804733727, 0.5342011834319527, 0.5938461538461538, 0.6684023668639053, 0.5086390532544379,
      0.5164497041420119, 0.5817751479289941, 0.5287573964497041, 0.527810650887574, 0.5171597633136095,
      0.5680473372781065, 0.5749112426035503, 0.5105325443786982, 0.5207100591715976, 0.6044970414201184,
      0.5088757396449705, 0.5088757396449705, 0.5086390532544379, 0.5084023668639053, 0.5084023668639053,
      0.5081656804733727, 0.5084023668639053, 0.5084023668639053, 0.5086390532544379, 0.5081656804733727,
      0.5086390532544379, 0.5088757396449705, 0.5095857988165681, 0.5098224852071006, 0.5095857988165681,
      0.5095857988165681, 0.5095857988165681, 0.5100591715976331, 0.5100591715976331, 0.5100591715976331,
      0.5107692307692308, 0.5119526627218934, 0.5119526627218934, 0.5124260355029586, 0.5119526627218934,
      0.5107692307692308, 0.5110059171597633, 0.5105325443786982, 0.5112426035502958, 0.5107692307692308,
      0.5105325443786982, 0.5102958579881657, 0.5105325443786982, 0.5110059171597633, 0.5112426035502958,
      0.5114792899408284, 0.5110059171597633, 0.5110059171597633, 0.5114792899408284, 0.5124260355029586,
      0.5126627218934912, 0.5136094674556213, 0.5145562130177515, 0.5138461538461538, 0.5169230769230769,
      0.5176331360946745, 0.5181065088757396, 0.5138461538461538, 0.5126627218934912, 0.5289940828402366,
      0.5337278106508876, 0.5372781065088758, 0.5294674556213018, 0.5275739644970414, 0.5195266272189349,
      0.5228402366863906, 0.5275739644970414, 0.5299408284023669, 0.530414201183432, 0.5356213017751479,
      0.5453254437869822, 0.5519526627218935, 0.5588165680473373, 0.5441420118343195, 0.5396449704142012,
      0.5431952662721894, 0.5446153846153846, 0.541301775147929, 0.5453254437869822, 0.5479289940828402,
      0.5446153846153846, 0.5457988165680473, 0.5332544378698225, 0.5377514792899408, 0.5405917159763314,
      0.5403550295857988, 0.5164497041420119, 0.5124260355029586, 0.5124260355029586, 0.5249704142011834,
      0.5268639053254438, 0.5266272189349113, 0.5133727810650888, 0.5214201183431952, 0.5299408284023669,
      0.5315976331360946, 0.5195266272189349, 0.5249704142011834, 0.5327810650887574, 0.5315976331360946, 0.52,
      0.5133727810650888, 0.5320710059171597, 0.538698224852071, 0.5342011834319527, 0.5318343195266272,
      0.5353846153846153, 0.5344378698224852, 0.5351479289940828, 0.5351479289940828, 0.5346745562130177,
      0.5379881656804734, 0.5372781065088758, 0.5441420118343195, 0.5457988165680473, 0.5396449704142012,
      0.5604733727810651, 0.5739644970414202, 0.5879289940828403, 0.5829585798816568, 0.5843786982248521,
      0.5758579881656805, 0.5765680473372781, 0.5798816568047337, 0.5992899408284024, 0.6205917159763313,
      0.6149112426035503, 0.6210650887573964, 0.6142011834319526, 0.6127810650887574, 0.6104142011834319,
      0.6125443786982249, 0.6094674556213018, 0.6328994082840237, 0.6115976331360947, 0.6272189349112426,
      0.6364497041420119, 0.6437869822485207, 0.6444970414201183, 0.5713609467455621]

plt.plot([i for i in range(19, 3000, 20)], a5, label="A = 5")
plt.plot([i for i in range(19, 3000, 20)], a3, label="A = 3")
plt.plot([i for i in range(19, 3000, 20)], a2, label="A = 2")
plt.plot([i for i in range(19, 3000, 20)], a1, label="A = 1")
plt.legend()
plt.grid(True)
plt.show()
"""

# import os
# video_name = 'test_video_after_norn.mp4'
# image_folder = r"D:\pythonProject\phase_wm\extract\after_normal_phas"
# os.chdir(image_folder)
#
# images = [img for img in os.listdir(image_folder)
#           if img.endswith(".png")]
# sort_name_img = sort_spis(images, "result")
# frame = cv2.imread(os.path.join(image_folder, images[0]))
# height, width, layers = frame.shape
# # fourcc = cv2.VideoWriter_fourcc(*'H264')
#
# video = cv2.VideoWriter(video_name, 0, 50, (width, height))
#
# cnt = 0
# for image in sort_name_img:
#     # if cnt % 300 == 0:
#
#     video.write(cv2.imread(os.path.join(image_folder, image)))
#     if cnt % 799 == 0:
#         print(cnt)
#     cnt += 1
# cv2.destroyAllWindows()
# video.release()

"""

list_v = [3]
for i in list_v:
    my_file1_acc = open(r'D:/pythonProject/Phase_WM_Clear\data/acc_list_49_1024_no_smooth_union_on_%d_center_' % 10 + str(
            3) + '_bitr' + str(
            5) + "_shift" + str(10) + '.txt', "r")
    # my_file1_var = open("data/var_list_no_smooth_union_on_%d_center_" % 0 + str(2) + '_bitr' + str(10) + '.txt', "r")
    my_file2_acc = open(r'D:/pythonProject/Phase_WM_Clear\data/acc_list_49_1024_no_smooth_union_on_%d_center_' % 0 + str(
        3) + '_bitr' + str(
        5) + "_shift" + str(0) + '.txt', "r")
    # my_file2_var = open("data/var_list_2_bitr20.txt", "r")
    # reading the file
    # data_var = my_file1_var.read()
    #
    # # replacing end of line('/n') with ' ' and
    # # splitting the text it further when '.' is seen.
    # data_into_list_var = data_var.replace('\n', ' ').split(" ")
    # list_split_var = np.array([float(words) for segments in data_into_list_var for words in segments.split()])
    # list_split_var[list_split_var > 1000] = 1000
    # list_split_var /= 1000
    # plt.plot(list_split_var, label="Variance. Embedding in all picture")

    # data_var2 = my_file2_var.read()
    # #
    # # # replacing end of line('/n') with ' ' and
    # # # splitting the text it further when '.' is seen.
    # data_into_list_var2 = data_var2.replace('\n', ' ').split(" ")
    # list_split_var2 = np.array([float(words) for segments in data_into_list_var2 for words in segments.split()])
    # list_split_var2[list_split_var2 > 1000] = 1000
    # list_split_var2 /= 1000
    # plt.plot(list_split_var2, label="Variance. Embedding in corner")

    data1_acc = my_file1_acc.read()
    data_into_list1_acc = data1_acc.replace('\n', ' ').split(" ")
    list_split1_acc = np.array([float(words) for segments in data_into_list1_acc for words in segments.split()])
    #
    data2_acc = my_file2_acc.read()
    data_into_list2_acc = data2_acc.replace('\n', ' ').split(" ")
    list_split2_acc = np.array([float(words) for segments in data_into_list2_acc for words in segments.split()])
    # list_split2_acc[list_split2_acc > 1000] = 1000
    # print(len(list_split2_acc), len(list_split1_acc), len(range(19, 2980, 20)))
    plt.plot(range(19, 2980, 20), list_split2_acc, label="Size of QR = 49x49")
    plt.plot(range(19, 2980, 20), list_split1_acc, label="Size of QR = 65x65")
    # plt.plot(range(19, 2980, 20), list_split2_acc[:-1], label="Accuracy. Embedding in All Picture. Bitrate = 10")
    plt.title("Spectral Method. Embedding in All Picture. Bitrate = 5.A =%d" % i)
plt.legend()
plt.grid(True)
plt.show()
"""
from scpetrcal_halftone import energy_spector


def check_energ_spector():
    orig_wave = io.imread(r"D:\pythonProject/Phase_WM_Clear/data/spatial_spectr_wm_65.png").astype(int)
    dif_val = []
    qr_acc = []
    cnt = 1
    extr_wave = io.imread("D:/pythonProject/phase_wm/extract/after_normal_phas/result" + str(2950) + ".png").astype(int)
    for i in range(2951, 3000, 1):
        extr_wave += io.imread("D:/pythonProject/phase_wm/extract/after_normal_phas/result" + str(i) + ".png").astype(
            int)
        cnt += 1
        # extr_wave1 = io.imread("D:/pythonProject/phase_wm/extract/after_normal_phas/result" + str(i - 1) + ".png").astype(
        #     int)

        # spector = check_spatial2spectr(extr_wave)
        # qr_acc.append(compare_qr(
        #     spector, io.imread("data/check_ifft_wm.png")))
        # dif_val.append(np.var(dif_img))

    dif_img = 128 + orig_wave - extr_wave / cnt

    img2 = Image.fromarray(dif_img.astype('uint8'))
    img2.save(r"data/diff_extract_img.png")

    energ = energy_spector(dif_img)

    img2 = Image.fromarray(energ.astype('uint8'))
    img2.save(r"data/energ_spector_diff_img.png")
    dif_val = np.array(dif_val)
    dif_val /= np.max(dif_val)
    plt.plot(dif_val)
    plt.plot(qr_acc)
    plt.show()


# math_exp = [i for i in np.arange(1500, 3501, 500)]
cef_cor_txt = [0.014, 0.029, 0.044, 0.059]
# ampl1 = [0.9108698396667088, 0.8793081681605858, 0.9409165509405378, 0.9550561797752809, 0.9739931826789546,
#          0.9861128645373058, 0.98510289104911, 0.9938139123847999, 0.991541472036359, 0.9970963262214367,
#         ]
#
# ampl2 = [0.9988637798257796, 0.9978538063375837, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
# ampl3 = [1]*10

# tet01 = [0.8405504355510668, 0.8740058073475572, 0.9097336194924883, 0.9596010604721626, 0.9757606362832976,
#          0.985355384421159, 0.9863653579093549, 0.9888902916298448, 0.9936876656987754, 0.9946976391869713]
# tet06 = [0.8030551698017927, 0.8430753692715566, 0.9257669486175988, 0.9599798005302361, 0.9744981694230527,
#          0.9871228380255018, 0.9862391112233304, 0.9926776922105794, 0.9934351723267264, 0.9960863527332408]
# tet11 = [0.8652947860118672, 0.9045575053654842, 0.9330892564070193, 0.9497538189622522, 0.9742456760510037,
#          0.9852291377351344, 0.98510289104911, 0.9890165383158692, 0.9929301855826285, 0.9954551193031183]
# tet16 = [0.9108698396667088, 0.8793081681605858, 0.9409165509405378, 0.9550561797752809, 0.9739931826789546,
#          0.9861128645373058, 0.98510289104911, 0.9938139123847999, 0.991541472036359, 0.9970963262214367]
# tet21 = [0.8699659133947734, 0.9412952909986113, 0.9869965913394774, 0.9945713925009468, 0.9909102386062366,
#          0.9862391112233304, 0.9842191642469386, 0.984092917560914, 0.9899002651180406, 0.9955813659891428, ]
# tet26 = [0.8424441358414342, 0.8931953036232799, 0.914530993561419, 0.9083449059462189, 0.9342254765812398,
#          0.9572023734376972, 0.9439464714051257, 0.9199596010604721, 0.9303118293144805, 0.9337204898371417]
# tet31 = [0.846231536422169, 0.8976139376341371, 0.9200858477464966, 0.9221057947228886, 0.9488700921600808,
#          0.969195808610024, 0.9580861002398687, 0.9423052644868072, 0.9525312460547911, 0.9558136598914279]
# bet969 = [0.8471152632243404, 0.9068299457139251, 0.9242519883853049, 0.930185582628456, 0.9550561797752809,
#           0.9760131296553466, 0.96768084837773, 0.9614947607625299, 0.9695745486680974, 0.9713420022724404]
#
# bet979 = [0.8490089635147078, 0.8972351975760636, 0.9267769221057948, 0.937634137103901, 0.9633884610528973,
#           0.9814417371543998, 0.9803055169801793, 0.977149349829567, 0.9803055169801793, 0.9864916045953793]
# bet989 = [0.8515338972351976, 0.9094811261204393, 0.9320792829188234, 0.9447039515212725, 0.9689433152379751,
#           0.9847241509910365, 0.983335437444767, 0.9832091907587426, 0.9896477717459917, 0.993561419012751]
# bet999 = [0.8652947860118672, 0.9045575053654842, 0.9330892564070193, 0.9497538189622522, 0.9742456760510037,
#           0.9852291377351344, 0.98510289104911, 0.9890165383158692, 0.9929301855826285, 0.9954551193031183]
#
# acc_70 = [0.9875015780835753, 0.985734124479232, 0.98485039767706, 0.9799267769221058]

# Generate sample data
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Create a plot
plt.plot(x, y, label='sin(x)')
plt.title('Sample Plot')  # Add title
plt.xlabel('X-axis')  # Add X-axis label
plt.ylabel('Y-axis')  # Add Y-axis label
plt.legend()  # Add legend

# Save the plot as .eps (ensure labels and title are set before saving)
plt.savefig('plot_with_labels.eps', format='eps', dpi=1000)

plt.show()

tet01 = [0.541850776417119, 0.6259310693094307, 0.5946218911753567, 0.6380507511677819, 0.6619113748264108,
         0.6322434036106552, 0.6346420906451206, 0.5861633632117157, 0.5582628456003029, 0.5778310819340993,
         0.5783360686781972, 0.5783360686781972, 0.5984092917560915, 0.5689938139123848, 0.558515338972352,
         0.5742961747254134, 0.5907082439085973, 0.5759373816437319, 0.5787148087362707, 0.5688675672263603,
         0.5533392248453478, 0.5523292513571518, 0.5597778058325968, 0.5597778058325968, 0.5597778058325968,
         0.5597778058325968, 0.5597778058325968, 0.5597778058325968, 0.5597778058325968, 0.5597778058325968,
         0.5597778058325968, 0.5597778058325968, 0.5597778058325968, 0.5597778058325968, 0.5597778058325968,
         0.5597778058325968, 0.5597778058325968, 0.5597778058325968, 0.5597778058325968, 0.5597778058325968,
         0.5597778058325968, 0.5568741320540336, 0.5538442115894457, 0.5538442115894457, 0.5538442115894457,
         0.5538442115894457, 0.5538442115894457, 0.5538442115894457, 0.5538442115894457, 0.5538442115894457,
         0.5538442115894457, 0.5538442115894457, 0.5539704582754703, 0.5527079914152253, 0.5519505112990784,
         0.5476581239742457, 0.5509405378108825, 0.5313723014770863, 0.5054917308420654, 0.5019568236333797,
         0.5143289988637798, 0.5414720363590456, 0.5263224340361066, 0.5313723014770863, 0.5532129781593234,
         0.5615452594369398, 0.5683625804822623, 0.5852796364095443, 0.581618482514834, 0.581618482514834,
         0.581618482514834, 0.581618482514834, 0.581618482514834, 0.581618482514834, 0.5799772755965156,
         0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156,
         0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156,
         0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156,
         0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156,
         0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156, 0.5799772755965156]
tet06 = [0.705592728190885, 0.7179649034212852, 0.7933341749779068, 0.8170685519505113, 0.8490089635147078,
         0.8478727433404873, 0.8553212978159324, 0.8746370407776796, 0.892437823507133, 0.9166771872238354,
         0.9291756091402601, 0.9404115641964399, 0.9320792829188234, 0.945840171695493, 0.9568236333796238,
         0.9623784875647015, 0.9734881959348567, 0.9772755965155915, 0.9839666708748895, 0.9835879308168161,
         0.9854816311071835, 0.9861128645373058, 0.9881328115136978, 0.9900265118040651, 0.9904052518621386,
         0.9910364852922611, 0.9909102386062366, 0.992298952152506, 0.992803938896604, 0.9931826789546775,
         0.992803938896604, 0.9936876656987754, 0.9940664057568489, 0.9950763792450448, 0.9952026259310693,
         0.9960863527332408, 0.9969700795354122, 0.9969700795354122, 0.9972225729074612, 0.9969700795354122,
         0.9968438328493877, 0.9978538063375837, 0.9977275596515591, 0.9979800530236081, 0.9978538063375837,
         0.9983587930816816, 0.9986112864537305, 0.9986112864537305, 0.9991162731978286, 0.9984850397677061,
         0.9984850397677061, 0.9993687665698775, 0.998990026511804, 0.9993687665698775, 0.9998737533139755,
         0.9996212599419265, 0.999747506627951, 0.9998737533139755, 0.9996212599419265, 0.9998737533139755,
         0.999747506627951, 0.999747506627951, 1.0, 1.0, 0.9998737533139755, 1.0, 0.999747506627951, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

tet11 = [0.7679585910869839, 0.8267895467743972, 0.8666834995581366, 0.9366241636157051, 0.937634137103901,
         0.9614947607625299, 0.96768084837773, 0.9795480368640324, 0.9805580103522282, 0.9863653579093549,
         0.9895215250599672, 0.992298952152506, 0.9926776922105794, 0.9939401590708243, 0.9938139123847999,
         0.9952026259310693, 0.9958338593611917, 0.9963388461052898, 0.9981062997096326, 0.9981062997096326,
         0.9981062997096326, 0.999242519883853, 0.9979800530236081, 0.9984850397677061, 0.9991162731978286,
         0.9986112864537305, 0.9991162731978286, 0.9988637798257796, 0.999242519883853, 0.9998737533139755,
         0.9994950132559021, 0.9994950132559021, 0.999747506627951, 0.9998737533139755, 0.9998737533139755,
         0.999747506627951, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0]

tet16 = [0.7996465092791314, 0.8752682742078021, 0.9221057947228886, 0.9569498800656483, 0.9739931826789546,
         0.9821992172705466, 0.9821992172705466, 0.9873753313975508, 0.991793965408408, 0.9948238858729959,
         0.9958338593611917, 0.9973488195934856, 0.9959601060472163, 0.9969700795354122, 0.9977275596515591,
         0.9983587930816816, 0.9987375331397551, 0.998990026511804, 0.998990026511804, 0.999242519883853,
         0.9993687665698775, 0.9994950132559021, 0.9998737533139755, 0.999747506627951, 1.0, 0.9998737533139755,
         0.9998737533139755, 1.0, 0.9994950132559021, 0.999747506627951, 0.9998737533139755, 0.9998737533139755,
         0.9998737533139755, 0.9998737533139755, 1.0, 0.9998737533139755, 1.0, 1.0, 0.9998737533139755, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

tet21 = [0.8028026764297437, 0.8091150107309684, 0.8709758868829693, 0.9043050119934352, 0.9353616967554602,
         0.9438202247191011, 0.9510162858224972, 0.9618735008206034, 0.9649034212851912, 0.9774018432016159,
         0.9877540714556243, 0.991541472036359, 0.9941926524428734, 0.9958338593611917, 0.9983587930816816,
         0.9983587930816816, 0.9991162731978286, 0.9994950132559021, 0.999747506627951, 0.999747506627951,
         0.999747506627951, 0.9994950132559021, 0.9993687665698775, 0.9994950132559021, 0.9994950132559021,
         0.999747506627951, 0.999747506627951, 0.9994950132559021, 0.9998737533139755, 0.9998737533139755,
         0.9998737533139755, 0.999747506627951, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

tet26 = [0.8418129024113117, 0.876025754323949, 0.9282918823380886, 0.9593485671001136, 0.9799267769221058,
         0.9830829440727181, 0.9834616841307916, 0.9875015780835753, 0.992046458780457, 0.9938139123847999,
         0.9946976391869713, 0.9972225729074612, 0.9974750662795102, 0.9974750662795102, 0.9978538063375837,
         0.9987375331397551, 0.999242519883853, 0.999242519883853, 0.9996212599419265, 0.9998737533139755,
         0.9996212599419265, 0.999747506627951, 1.0, 0.9996212599419265, 0.9998737533139755, 1.0, 1.0, 1.0,
         0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

tet31 = [0.8557000378740058, 0.9290493624542355, 0.9849766443630855, 0.992551445524555, 0.9880065648276732,
         0.9849766443630855, 0.9823254639565712, 0.984092917560914, 0.992551445524555, 0.9965913394773387,
         0.9987375331397551, 0.998990026511804, 0.9986112864537305, 0.9988637798257796, 0.9987375331397551,
         0.999242519883853, 0.9994950132559021, 0.9998737533139755, 1.0, 0.9998737533139755, 1.0, 0.9998737533139755,
         0.999747506627951, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
         1.0]

alf0899 = [0.8097462441610908, 0.9127635399570762, 0.9357404368135337, 0.9820729705845221, 0.9719732357025628,
           0.9882590581997223, 0.9890165383158692, 0.992551445524555, 0.9939401590708243, 0.9960863527332408,
           0.9965913394773387, 0.9965913394773387, 0.9972225729074612, 0.9979800530236081, 0.999242519883853,
           0.998990026511804, 0.9993687665698775, 0.9994950132559021, 0.999747506627951, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

alf0919 = [0.8355005681100871, 0.9231157682110844, 0.9366241636157051, 0.9830829440727181, 0.9742456760510037,
           0.9888902916298448, 0.9901527584900897, 0.9936876656987754, 0.9948238858729959, 0.9965913394773387,
           0.9969700795354122, 0.9969700795354122, 0.9978538063375837, 0.9986112864537305, 0.9988637798257796,
           0.9988637798257796, 0.9987375331397551, 0.999747506627951, 0.999747506627951, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

alf0939 = [0.5134452720616084, 0.8974876909481126, 0.9213483146067416, 0.9796742835500568, 0.9751294028531751,
           0.9881328115136978, 0.991541472036359, 0.9934351723267264, 0.9953288726170938, 0.9960863527332408,
           0.9967175861633633, 0.9967175861633633, 0.9976013129655347, 0.9982325463956571, 0.9991162731978286,
           0.9991162731978286, 0.9996212599419265, 0.999747506627951, 0.999747506627951, 0.9998737533139755,
           0.999747506627951, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

alf0959 = [0.5149602322939023, 0.9096073728064639, 0.9256407019315743, 0.9804317636662038, 0.9792955434919833,
           0.9878803181416488, 0.991793965408408, 0.9939401590708243, 0.9959601060472163, 0.9972225729074612,
           0.9978538063375837, 0.9978538063375837, 0.9982325463956571, 0.9986112864537305, 0.9987375331397551,
           0.999242519883853, 0.9994950132559021, 0.999747506627951, 0.9998737533139755, 0.9998737533139755,
           0.999747506627951, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

alf0979 = [0.5196313596768085, 0.9166771872238354, 0.9266506754197702, 0.9775280898876404, 0.9789168034339099,
           0.9880065648276732, 0.9912889786643101, 0.9938139123847999, 0.9958338593611917, 0.9968438328493877,
           0.9968438328493877, 0.9968438328493877, 0.9977275596515591, 0.9984850397677061, 0.9988637798257796,
           0.9991162731978286, 0.9994950132559021, 0.999747506627951, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

alf0999 = [0.5224087867693473, 0.9236207549551825, 0.931195556116652, 0.9720994823885873, 0.9775280898876404,
           0.9842191642469386, 0.9888902916298448, 0.9914152253503346, 0.993308925640702, 0.9945713925009468,
           0.9950763792450448, 0.9950763792450448, 0.9960863527332408, 0.9970963262214367, 0.9978538063375837,
           0.9981062997096326, 0.9984850397677061, 0.998990026511804, 0.9993687665698775, 0.999747506627951,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
           0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
           1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

beta0919 = [0.5610402726928418, 0.8089887640449438, 0.90809241257417, 0.9633884610528973, 0.9887640449438202,
            0.9391490973361949, 0.5350334553717965, 0.9454614316374195, 0.9772755965155915, 0.9946976391869713,
            0.9959601060472163, 0.9959601060472163, 0.9934351723267264, 0.9719732357025628, 0.9638934477969954,
            0.9818204772124731, 0.9941926524428734, 0.9977275596515591, 0.999242519883853, 0.998990026511804,
            0.9965913394773387, 0.9954551193031183, 0.993561419012751, 0.993561419012751, 0.993561419012751,
            0.993561419012751, 0.993561419012751, 0.993561419012751, 0.993561419012751, 0.993561419012751,
            0.993561419012751, 0.993561419012751, 0.993561419012751, 0.993561419012751, 0.993561419012751,
            0.993561419012751, 0.993561419012751, 0.993561419012751, 0.993561419012751, 0.993561419012751,
            0.993561419012751, 0.993561419012751, 0.9939401590708243, 0.9939401590708243, 0.9939401590708243,
            0.9939401590708243, 0.9939401590708243, 0.9939401590708243, 0.9939401590708243, 0.9939401590708243,
            0.9939401590708243, 0.9939401590708243, 0.9943188991288978, 0.9960863527332408, 0.9954551193031183,
            0.9960863527332408, 0.9963388461052898, 0.9982325463956571, 0.9987375331397551, 0.9965913394773387,
            0.993561419012751, 0.993561419012751, 0.9969700795354122, 0.9987375331397551, 0.9994950132559021,
            0.999747506627951, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
beta0939 = [0.5623027395530867, 0.8570887514202752, 0.938139123847999, 0.9649034212851912, 0.8206034591591971,
            0.9946976391869713, 0.9970963262214367, 0.9983587930816816, 0.9993687665698775, 0.999747506627951,
            0.9998737533139755, 0.9998737533139755, 0.999747506627951, 0.9991162731978286, 0.998990026511804,
            0.9996212599419265, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9998737533139755, 0.9998737533139755,
            0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
            0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
            0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755, 0.9998737533139755,
            0.9998737533139755, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0]
beta0959 = [0.5562428986239111, 0.914530993561419, 0.9457139250094685, 0.565963893447797, 0.9967175861633633,
            0.9991162731978286, 0.999747506627951, 0.9998737533139755, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

beta0979 = [0.5450069435677314, 0.5336447418255271, 0.9900265118040651, 1.0, 0.9994950132559021, 0.9998737533139755,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

beta0999 = [0.5427345032192905, 0.9973488195934856, 0.9979800530236081, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0]

# plt.plot(np.arange(9, 1000, 10), , label="α = 0.899")
plt.plot(np.arange(9, 1000, 10), beta0919, label="β = 0.92")
plt.plot(np.arange(9, 1000, 10), beta0939, label="β = 0.94")
plt.plot(np.arange(9, 1000, 10), beta0959, label="β = 0.96")
plt.plot(np.arange(9, 1000, 10), beta0979, label="β = 0.98")
plt.plot(np.arange(9, 1000, 10), beta0999, label="β = 0.999")
plt.xlabel("Номер кадра", fontsize=20)
plt.ylabel("Точность извлечения", fontsize=20)
plt.legend()
plt.grid(True)
plt.title("Зависимость ол параметра сглаживания β", fontsize=20)
plt.show()
# plt.plot(np.arange(9, 1000, 10), tet31, label="θ = 3.1")
# plt.plot(np.arange(9, 100, 10), tet01, label="θ = 2.7", )
# plt.plot(np.arange(9, 100, 10), tet06, label="θ = 2.8")
# plt.plot(np.arange(9, 100, 10), tet11, label="θ = 2.9")
# plt.plot(np.arange(9, 100, 10), tet16, label="θ = 3.0")
# plt.plot(np.arange(9, 100, 10), tet21, label="θ = 3.1")
# plt.plot(np.arange(9, 100, 10), tet26, label="Θ = 2.6")
# plt.plot(np.arange(9, 100, 10), tet31, label="α  = 0.959")
# plt.plot(np.arange(9, 100, 10), bet969, label="Θ = 3.1")
# plt.plot(np.arange(9, 100, 10), bet979, label="α = 0.979")
# plt.plot(np.arange(9, 100, 10), bet989, label="Θ = 3.1")
# plt.plot(np.arange(9, 100, 10), bet999, label="α = 0.999")

plt.plot(np.arange(325, 1001, 150),
         [0.9900265118040651, 0.9900265118040651, 0.9878803181416488, 0.985355384421159, 0.9883853048857467]
         )
plt.ylim(0.96, 1)
plt.legend(fontsize=20)
plt.grid(True)
plt.xlabel("Дисперсия текстуры в кадре", fontsize=20)
plt.ylabel("Точность извлечения", fontsize=20)
plt.title("Синтезированное видео с усредненными параметрами", fontsize=20)
# plt.show()


import matplotlib.pyplot as plt
import numpy as np

# Данные для графика
x = np.arange(325, 1001, 150)
y = [0.9900265118040651, 0.9900265118040651, 0.9878803181416488, 0.985355384421159, 0.9883853048857467]

# Создание фигуры и осей
fig, ax = plt.subplots(figsize=(8, 6))

# Построение графика
ax.plot(x, y, )

# Подписи осей
ax.set_xlabel(r'Дисперсия текстуры в кадре $Dт$ ', fontsize=20)
ax.set_ylabel(r'Точность извлечения $P$ ', fontsize=20)

# Настройка сетки и легенды
ax.grid(True)

# Установка пределов осей

ax.set_ylim(0.96, 1.001)

# Установка заголовка
ax.set_title('Синтезированное видео с усредненными параметрами', fontsize=16)

# Показ графика
plt.show()
